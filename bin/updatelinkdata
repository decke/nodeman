#!/usr/bin/env php
<?php
declare(strict_types=1);

namespace FunkFeuer\Nodeman;


require_once __DIR__.'/../vendor/autoload.php';

/* set working directory to root directory */
chdir(dirname(__FILE__).'/../');

/* set default timezone to UTC */
date_default_timezone_set('UTC');

/* allow fetching urls */
ini_set('allow_url_fopen', '1');


function logMsg(string $msg, string $level = 'INFO'): void
{
    printf("[%s] [%5s] %s\n", date('H:i:s d.m.Y', time()), $level, $msg);
}

$json = @file_get_contents('http://localhost:9090/topology');
if (!$json) {
    logMsg('Failed fetching topology info from olsrd', 'ERROR');
    exit(1);
}

$data = json_decode($json);
if (!$data) {
    logMsg('Failed parsing json content from olsrd', 'ERROR');
    exit(1);
}

$handle = Config::getDbHandle();
$handle->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);

$iface = new NetInterface();
$linkcount = count($data->{'topology'});

$recalcInterfaces = array();

logMsg('Analyzing '.$linkcount.' active links', 'INFO');

for ($i=0; $i < $linkcount; $i++) {
    $topodata = $data->{'topology'}[$i];

    $ifaceFrom = new NetInterface();
    if (!$ifaceFrom->loadByIPAddress($topodata->lastHopIP)) {
        logMsg(sprintf('IP %s is not known!', $topodata->lastHopIP), 'WARN');
        continue;
    }

    $ifaceTo = new NetInterface();
    if (!$ifaceTo->loadByIPAddress($topodata->destinationIP)) {
        logMsg(sprintf('IP %s not known!', $topodata->destinationIP), 'WARN');
        continue;
    }

    $link = new InterfaceLink();
    if (!$link->loadLinkFromTo($ifaceFrom->interfaceid, $ifaceTo->interfaceid)) {
        $link->fromif = $ifaceFrom->interfaceid;
        $link->toif = $ifaceTo->interfaceid;
        $link->status = '';
        $link->firstup = time();
    }

    if ($link->status != 'up') {
        if (!in_array($link->fromif, $recalcInterfaces)) {
            $recalcInterfaces[] = $link->fromif;
        }

        if (!in_array($link->toif, $recalcInterfaces)) {
            $recalcInterfaces[] = $link->toif;
        }
    }

    $link->quality = $topodata->linkQuality;
    $link->source = 'olsrd';
    $link->status = 'up';
    $link->lastup = $data->{'systemTime'};

    if (!$link->save()) {
        logMsg('Could not update linkdata', 'ERROR');
        continue;
    }

    logMsg(sprintf('%05d IP %s - %s (%0.1f)', $link->linkid, $topodata->lastHopIP, $topodata->destinationIP, $topodata->linkQuality), 'INFO');
}

// find and process outdated links
logMsg('Finding outdated links', 'INFO');

$stmt = $handle->prepare('SELECT linkid FROM linkdata WHERE lastup < ?');

if (!$stmt->execute(array($data->{'systemTime'}))) {
    logMsg('Failed to find outdated links', 'ERROR');
    exit(1);
}

while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
    $link = new InterfaceLink((int)$row['linkid']);

    if ($link->status != 'down') {
        if (!in_array($link->fromif, $recalcInterfaces)) {
            $recalcInterfaces[] = $link->fromif;
        }

        if (!in_array($link->toif, $recalcInterfaces)) {
            $recalcInterfaces[] = $link->toif;
        }
    }

    $link->quality = 0.0;
    $link->status = 'down';

    if (!$link->save()) {
        logMsg('Could not update linkdata', 'ERROR');
        continue;
    }
}

// recalc Interface Status
logMsg(sprintf('Recalculating Status for %d interfaces', count($recalcInterfaces)), 'INFO');

$recalcLocations = array();

foreach ($recalcInterfaces as $interfaceid) {
    $iface = new NetInterface($interfaceid);
    $locationid = $iface->getNode()->getLocation()->locationid;

    if (!in_array($locationid, $recalcLocations)) {
        $recalcLocations[] = $locationid;
    }

    $iface->getNode()->delAttribute('olsrd-uptime');
    $iface->recalcStatus();
}

// recalc Location Status
logMsg(sprintf('Recalculating Status for %d locations', count($recalcLocations)), 'INFO');

foreach ($recalcLocations as $locationid) {
    $location = new Location($locationid);
    $location->recalcStatus();
}

exit(0);
