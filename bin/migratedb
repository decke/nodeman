#!/usr/local/bin/php
<?php

namespace FunkFeuer\Nodeman;

use \FunkFeuer\Nodeman\Config;

require_once __DIR__.'/../vendor/autoload.php';

/* set working directory to root directory */
chdir(dirname(__FILE__).'/../');

/* set default timezone to UTC */
date_default_timezone_set('UTC');


function logMsg($msg, $level = 'INFO')
{
    printf("[%s] [%5s] %s\n", date('H:i:s d.m.Y', time()), $level, $msg);
}

function fetchPersons($handle)
{
    $data = array();
    $stmt = $handle->prepare('SELECT id, nick, firstname, lastname, email, tel, password FROM person WHERE 1=1 ORDER BY id');
    if (!$stmt->execute(array())) {
        return false;
    }

    while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
        $data[] = $row;
    }

    return $data;
}

function fetchLocations($handle)
{
    $data = array();
    $stmt = $handle->prepare('SELECT id, pixel_x, pixel_y, gps_lon, gps_lat, hidden, name, street, streetnr, creator_ip, time, comment, person_id, gallery_link, hastinc FROM location WHERE 1=1 ORDER BY id');
    if (!$stmt->execute(array())) {
        return false;
    }

    while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
        $data[] = $row;
    }

    return $data;
}

function fetchNodes($handle)
{
    $data = array();
    $stmt = $handle->prepare('SELECT id, location_id, person_id, name, comment, creator_ip, time, smokeping, snmp_ip, snmp_lastseen, hastinc FROM node WHERE 1=1 ORDER BY id');
    if (!$stmt->execute(array())) {
        return false;
    }

    while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
        $data[] = $row;
    }

    return $data;
}

function fetchNode($handle, $nodeid)
{
    $stmt = $handle->prepare('SELECT id, location_id, person_id, name, comment, creator_ip, time, smokeping, snmp_ip, snmp_lastseen, hastinc FROM node WHERE id = ? ORDER BY id');
    if (!$stmt->execute(array($nodeid))) {
        return false;
    }

    while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
        return $row;
    }

    return array();
}

function fetchInterfaces($handle)
{
    $data = array();
    $stmt = $handle->prepare('SELECT id, node_id, ip, net_id, name, snmp_mac, snmp_intnr FROM ip WHERE 1=1 ORDER BY id');
    if (!$stmt->execute(array())) {
        return false;
    }

    while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
        $data[] = $row;
    }

    return $data;
}


function createUsers($manman, $nodeman)
{
    /* Create Users */
    foreach(fetchPersons($manman) as $person)
    {
        if (!$person['tel'])
            $person['tel'] = '';

        if (!filter_var($person['email'], FILTER_VALIDATE_EMAIL)) {
            logMsg(sprintf("EMail %s is invalid! Skipping user", $person['email']), 'WARN');
            continue;
        }

        $user = new User();
        $user->password = '';
        $user->email = $person['email'];
        $user->firstname = $person['firstname'];
        $user->lastname = $person['lastname'];
        $user->phone = $person['tel'];
        $user->usergroup = $person['admin'] == 1 ? 'admin' : 'user';

        try {
            $user->save();

            // reset userid to the original one from the dump and overwrite password hash
            $stmt = $nodeman->prepare('UPDATE users SET userid = ?, password = ? WHERE userid = ?');
            $stmt->execute(array($person['id'], $person['password'], $user->userid));

            logMsg(sprintf("User %s created. ID %d", $user->email, $person['id']));
        } catch(\Exception $e) {
            logMsg(sprintf("Creating user %s failed!", $person['email']), 'ERROR');
            logMsg($e->getMessage(), 'ERROR');

            return false;
        }
    }

    return true;
}

function createLocations($manman, $nodeman)
{
    $nodeman->exec('DELETE FROM locations');

    /* Create Locations */
    foreach(fetchLocations($manman) as $loc)
    {
        /* convert from X/Y position to GPS coordinates */
        /* See: https://git.ffgraz.net/karte.git/tree/data.php */
        $loc['gps_lon'] = 15.43844103813 + ($loc['pixel_x'] - 4080) / 50675.5176;
        $loc['gps_lat'] = 47.07177327969 + (4806 - $loc['pixel_y']) / 75505.521;

        if(!$loc['gallery_link'])
            $loc['gallery_link'] = '';

        if($loc['person_id'] < 1) {
            $loc['person_id'] = 1; /* default owner for not assigned locations */
            logMsg(sprintf("Location %s has no owner. Assigning default User ID %d", $loc['name'], $loc['person_id']), 'WARN');
        }

        $location = new Location();
        $location->name = $loc['name'];
        $location->owner = $loc['person_id'];
        $location->address = sprintf("%s %d", $loc['street'], $loc['streetnr']);
        $location->latitude = $loc['gps_lat'];
        $location->longitude = $loc['gps_lon'];
        $location->status = 'offline';
        $location->gallerylink = $loc['gallery_link'];
        $location->description = $loc['comment'];

        try {
            $location->save();

            $stmt = $nodeman->prepare('UPDATE locations SET locationid = ? WHERE locationid = ?');
            $stmt->execute(array($loc['id'], $location->locationid));
            logMsg(sprintf("Location %s created. ID %d", $location->name, $loc['id']));
        } catch(\Exception $e) {
            logMsg(sprintf("Creating location %s failed!", $loc['name']), 'ERROR');
            logMsg($e->getMessage(), 'ERROR');
        }
    }

    return true;
}

function createNodes($manman, $nodeman)
{
    $nodeman->exec('DELETE FROM nodes');

    /* Create Nodes */
    foreach(fetchNodes($manman) as $node)
    {
        if($node['person_id'] < 1)
            $node['person_id'] = 1; /* default owner for not assigned nodes */

        if($node['location_id'] < 1) {
            $node['location_id'] = 11; /* default location for not assigned nodes (nirwana) */
            logMsg(sprintf("Node %s has no location. Assigning default Location ID %d", $node['name'], $node['location_id']), 'WARN');
        }

        $newnode = new \FunkFeuer\Nodeman\Node();
        $newnode->name = $node['name'];
        $newnode->owner = $node['person_id'];
        $newnode->location = $node['location_id'];
        $newnode->hardware = 1;
        $newnode->description = $node['comment'];

        try {
            $newnode->save();

            $stmt = $nodeman->prepare('UPDATE nodes SET nodeid = ? WHERE nodeid = ?');
            $stmt->execute(array($node['id'], $newnode->nodeid));
            logMsg(sprintf("Node %s created. ID %d", $newnode->name, $node['id']));
        } catch(\Exception $e) {
            logMsg(sprintf("Creating node %s failed!", $node['name']), 'ERROR');
            logMsg($e->getMessage(), 'ERROR');

            return false;
        }
    }

    return true;
}

function createInterfaces($manman, $nodeman)
{
    $nodeman->exec('DELETE FROM interfaces');

    /* Create Interfaces */
    foreach(fetchInterfaces($manman) as $iface)
    {
        $node = fetchNode($manman, $iface['node_id']);

        $newiface = new NetInterface();
        $newiface->name = $iface['name'];
        $newiface->node = $iface['node_id'];
        $newiface->category = 'wifi5'; // TODO
        $newiface->type = 'IPv4';
        $newiface->address = $iface['ip'];
        $newiface->status = 'offline';
        $newiface->ping = $node['smokeping'];
        $newiface->description = '';

        try {
            $newiface->save();

            logMsg(sprintf("Interface %s created. ID %d", $newiface->name, $iface['id']));
        } catch(\Exception $e) {
            logMsg(sprintf("Creating interface %s for node %d failed!", $iface['name'], $iface['node_id']), 'ERROR');
            logMsg($e->getMessage(), 'ERROR');

            return false;
        }
    }

    return true;
}



$nodeman = Config::getDbHandle();
$nodeman->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);

$manman = new \PDO('sqlite:share/manman.db');
$manman->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);

if(!createUsers($manman, $nodeman))
    exit(1);

if(!createLocations($manman, $nodeman))
    exit(1);

if(!createNodes($manman, $nodeman))
    exit(1);

if(!createInterfaces($manman, $nodeman))
    exit(1);

exit(0);

